# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: file-creator@6
  inputs:
    filepath: 'main.tf'
    filecontent: |
      terraform {
        required_providers {
          azurerm = {
            source  = "hashicorp/azurerm"
            version = "=2.52.0"
          }
        }
        backend "azurerm" {
          resource_group_name   = "rgfrontfactoryprod"
          storage_account_name  = "asafrontfactoryprod"
          container_name        = "terraform"
          key                   = "terraform.tfstate"
        }
      }
      provider "kubernetes" {
        config_path    = "~/.kube/config"
        config_context = "aksfrontfactoryprod"
      }
    fileoverwrite: true

- task: TerraformInstaller@0
  inputs:
    terraformVersion: 'latest'

- task: TerraformTaskV3@3
  inputs:
    provider: 'azurerm'
    command: 'init'
    backendServiceArm: $(azureResourceManagerConnection)
    backendAzureRmResourceGroupName: 'rgfrontfactoryprod'
    backendAzureRmStorageAccountName: 'asafrontfactoryprod'
    backendAzureRmContainerName: 'terraform'
    backendAzureRmKey: 'terraform.tfstate'

- task: AzureCLI@2
  inputs:
    azureSubscription: $(azureResourceManagerConnection)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      terraform workspace select $2
      terraform destroy --target kubernetes_service.customer-service-$1-$2
      terraform destroy --target kubernetes_pod.customer-pod-$1-$2
    arguments: '$(ProjectUID) $(CustomerUID)'
