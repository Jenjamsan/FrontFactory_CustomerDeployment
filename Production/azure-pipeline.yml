# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: AzureCLI@2
  name: keycloak
  inputs:
    azureSubscription: 'FF-SA'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    arguments: $(KEYCLOAK_CLIENT_ID) $(KEYCLOAK_USERNAME) $(KEYCLOAK_PASSWORD) $(KEYCLOAK_URL)
    inlineScript: |
        echo "curl -d client_id=$1&grant_type=password&username=$2&password=$3 -H Content-Type: application/x-www-form-urlencoded $4/realms/frontfactory/protocol/openid-connect/token"
        KEYCLOAK_RESPONSE=$(curl -d "client_id=$1&grant_type=password&username=$2&password=$3" -H "Content-Type: application/x-www-form-urlencoded" "$4/realms/frontfactory/protocol/openid-connect/token")
        KEYCLOAK_ACCESS_TOKEN=$(echo "$KEYCLOAK_RESPONSE" | jq '.access_token')
        echo "##vso[task.setvariable variable=KEYCLOAK_ACCESS_TOKEN;isOutput=true]$KEYCLOAK_ACCESS_TOKEN"
- task: AzureCLI@1
  displayName: 'Azure CLI '
  inputs:
    azureSubscription: $(azureResourceManagerConnection)
    scriptLocation: inlineScript
    arguments: '$(Build.SourcesDirectory) $(CustomerUID) $(ShareName) $(ConnectionString) $(ProjectUID) $(ProjectVersion) $(dirName) $(keycloak.KEYCLOAK_ACCESS_TOKEN)' 
    inlineScript: |
     echo "$(keycloak.KEYCLOAK_ACCESS_TOKEN)"
     echo "$8"
     az account set --subscription e2270597-5099-424b-9597-6c5963dd2d81
     az aks get-credentials --resource-group rgfrontfactoryprodv2 --name aksfrontfactoryprodv2
     mkdir -p $1/temp
     mkdir -p $1/temp2
     az storage file download --path "$2/$5/$6/$7.zip" --share-name "$3" --account-name asafrontfactoryprodv2 --dest "$1/temp" --connection-string "$4"
     ls $1/temp
     
- task: ExtractFiles@1
  inputs:
    archiveFilePatterns: '$(Build.SourcesDirectory)/temp/$(dirName).zip'
    destinationFolder: '$(Build.SourcesDirectory)/temp2/'
    cleanDestinationFolder: true
    overwriteExistingFiles: false
  
- task: Docker@2
  inputs:
    containerRegistry: 'acr'
    repository: 'customer/$(CustomerUID)/$(ProjectUID)'
    command: 'buildAndPush'
    Dockerfile: '$(Build.SourcesDirectory)/temp2/dockerfile'
    tags: $(ProjectVersion)

- task: file-creator@6
  inputs:
    filepath: 'main.tf'
    filecontent: |
      terraform {
        required_providers {
          azurerm = {
            source  = "hashicorp/azurerm"
            version = "=2.52.0"
          }
        }
        backend "azurerm" {
          resource_group_name   = "rgfrontfactoryprodv2"
          storage_account_name  = "asafrontfactoryprodv2"
          container_name        = "terraform"
          key                   = "terraform.tfstate"
        }
      }
      provider "kubernetes" {
        config_path    = "~/.kube/config"
        config_context = "aksfrontfactoryprodv2"
      }
      
      resource "kubernetes_namespace" "customer-namespace-$(CustomerUID)" {
        metadata {
          name = "customer-namespace-$(CustomerUID)"
        }
      }

      resource "kubernetes_service" "customer-service-$(ProjectUID)-$(CustomerUID)" {
        metadata {
          name = "customer-service-$(ProjectUID)-$(CustomerUID)"
      	  namespace = "customer-namespace-$(CustomerUID)"
        }
        spec {
          selector = {
            app = kubernetes_pod.customer-pod-$(ProjectUID)-$(CustomerUID).metadata.0.labels.app
          }
          session_affinity = "ClientIP"
          port {
            port        = 80
            target_port = 80
          }
      
          type = "LoadBalancer"
        }
      }
      
      resource "kubernetes_pod" "customer-pod-$(ProjectUID)-$(CustomerUID)" {
        metadata {
          name = "customer-pod-$(ProjectUID)-$(CustomerUID)"
      	  namespace = "customer-namespace-$(CustomerUID)"
          labels = {
            app = "customer-pod-$(ProjectUID)-$(CustomerUID)"
          }
        }
      
        spec {
          container {
            image = "acrfrontfactoryprodv2.azurecr.io/customer/$(CustomerUID)/$(ProjectUID):$(ProjectVersion)"
            name  = "customer-pod-$(ProjectUID)-$(CustomerUID)"
          }
        }
      }
    fileoverwrite: true

- task: TerraformInstaller@0
  inputs:
    terraformVersion: 'latest'

- task: TerraformTaskV3@3
  inputs:
    provider: 'azurerm'
    command: 'init'
    backendServiceArm: $(azureResourceManagerConnection)
    backendAzureRmResourceGroupName: 'rgfrontfactoryprodv2'
    backendAzureRmStorageAccountName: 'asafrontfactoryprodv2'
    backendAzureRmContainerName: 'terraform'
    backendAzureRmKey: 'terraform.tfstate'

- task: AzureCLI@2
  inputs:
    azureSubscription: $(azureResourceManagerConnection)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      terraform workspace new $1
      terraform workspace select $1
      terraform validate
      terraform apply -input=false -auto-approve
    arguments: '$(CustomerUID)'

- task: AzureCLI@2
  inputs:
    azureSubscription: $(azureResourceManagerConnection)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      sleep 10
      kubectl get svc customer-service-$2-$1 -n customer-namespace-$1 -o jsonpath="{.status.loadBalancer.ingress[*].ip}"
    arguments: '$(CustomerUID) $(ProjectUID)'

- task: AzureCLI@2
  inputs:
    azureSubscription: 'FF-SA'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
       #Get token keycloak
       
       #Call avec IP + Etat
