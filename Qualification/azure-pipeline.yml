pool:
  name: frontfactory

steps:

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
       cp -rf /mnt/ff-preprod-api-generation/$(CustomerUID)/$(ProjectUID)/$(ProjectVersion)/$(DirName) .
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      cd $(DirName)
      docker login -u $(DOCKER_LOGIN) -p $(DOCKER_PASSWORD) nexus-registry.frontfactory.local
      docker build . -t nexus-registry.frontfactory.local/customer/$(CustomerUID)/$(ProjectUID):$(ProjectVersion)
      docker push nexus-registry.frontfactory.local/customer/$(CustomerUID)/$(ProjectUID):$(ProjectVersion)

- task: file-creator@6
  inputs:
    filepath: 'main.tf'
    filecontent: |
      provider "kubernetes" {
        config_path    = "~/.kube/config"
        config_context = "kubernetes-admin@kubernetes"
      }
      
      resource "kubernetes_namespace" "customer-namespace-$(CustomerUID)" {
        metadata {
          name = "customer-namespace-$(CustomerUID)"
        }
      }
      
      resource "kubernetes_secret" "regcred" {
        metadata {
          name = "regcred"
      	  namespace = "customer-namespace-$(CustomerUID)"
        }
        data = {
          ".dockerconfigjson" = "${file("~/.docker/config.json")}"
        }
        type = "kubernetes.io/dockerconfigjson"
        depends_on = [kubernetes_namespace.customer-namespace-$(CustomerUID)]
      }

      resource "kubernetes_service" "customer-service-$(ProjectUID)" {
        metadata {
          name = "service-$(ProjectUID)"
      	  namespace = "customer-namespace-$(CustomerUID)"
        }
        spec {
          selector = {
            app = kubernetes_pod.customer-pod-$(ProjectUID).metadata.0.labels.app
          }
          session_affinity = "ClientIP"
          port {
            port        = 80
            target_port = 80
          }
      
          type = "LoadBalancer"
        }
      }
      
      resource "kubernetes_pod" "customer-pod-$(ProjectUID)" {
        metadata {
          name = "customer-pod-$(ProjectUID)"
      	  namespace = "customer-namespace-$(CustomerUID)"
          labels = {
            app = "customer-pod-$(ProjectUID)"
          }
        }
        spec {
          container {
            image = "nexus-registry.frontfactory.local/customer/$(CustomerUID)/$(ProjectUID):$(ProjectVersion)"
            name  = "customer-pod-$(ProjectUID)"
          }
          image_pull_secrets {
            name = "regcred"
          }
        }
      depends_on = [kubernetes_secret.regcred]
      }
    fileoverwrite: true

- task: TerraformInstaller@0
  inputs:
    terraformVersion: 'latest'
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      # Write your commands here
      terraform init
      terraform workspace new $(CustomerUID)
      terraform workspace select $(CustomerUID)
      terraform validate
      terraform apply -input=false -auto-approve
